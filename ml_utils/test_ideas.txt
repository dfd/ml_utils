import pandas as pd
import numpy as np
df2 = pd.DataFrame(np.random.randn(10, 5))

from ml_utils import pandas_utils
pandas_utils.get_num_char_vars(df2)


from pandas import Series

d = {'one' : Series([1., 2., 3., 4., 5., 6., 7.], index=['a', 'b', 'c', 'd', 'e', 'f', 'g']),
         'two' : Series([1.1, 2.2, 3.3, 4.4], index=['a', 'b', 'c', 'd']),
         'three' : Series(['z','z','x','y','x','y','u','w'], index=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']),
         'four' : Series(['a','a','b','b','c','c','c','d'], index=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])

}

df = pd.DataFrame(d)

pu.get_num_char_vars(df)
pu.get_num_char_vars(df, missing=True)
pu.get_num_char_vars(df, missing=True, limit=df.shape[0]-2)


pu.print_unique_values(df)
pu.print_unique_values(df,'three')
pu.print_unique_values(df,['three'])


new_var = df.apply(lambda f: pu.to_str(f['one']), axis = 1)
df['new_var'] = new_var
new_var = df.apply(lambda f: pu.to_int(f['new_var'],), axis = 1)
new_var = df.apply(lambda f: pu.to_str(f['two'], False), axis = 1)


pu.impute_by_groups(df, 'one', 'three', 'median')
df = pd.DataFrame(d)
pu.impute_by_groups(df, ['one','two'], 'three', 'median')
df = pd.DataFrame(d)
pu.impute_by_groups(df, ['one','two'], ['three','four'], 'median')
df = pd.DataFrame(d)
pu.impute_by_groups(df, ['one','two'], ['three','four'], 'mean')
df = pd.DataFrame(d)

rf = pu.standardize_dataframe(df)
rf = pu.standardize_dataframe(df, sd=.5, drop_last_dummy=False)


pu.count_missing(df)
pu.count_missing(df,'one')
pu.count_missing(df,['one','two'])

pu.count_missing(df,['one','two'], pct=True)


pu.mean_by_group(df, 'two', 'three')

df['new_var'] = df.apply(lambda f : pu.to_str(f['two'], False), axis = 1)
df['new_var2'] = df.apply(lambda f : pu.to_float(f['new_var']), axis = 1)
df['new_var'] = df.apply(lambda f : pu.to_str(f['one']), axis = 1)
df['new_var2'] = df.apply(lambda f : pu.to_int(f['new_var']), axis = 1)


pu.convert_col_type(df, ['one', 'two'], 'str')
pu.convert_col_type(df, ['one', 'two'], 'float', False)
pu.convert_col_type(df, ['one', 'two'], 'str', True)
pu.convert_col_type(df, ['one', 'two'], 'int')


num_samples = 400

# The desired mean values of the sample.
mu = np.array([5.0, 0.0, 10.0])

# The desired covariance matrix.
r = np.array([
        [  3.40, -2.75, -2.00],
        [ -2.75,  5.50,  1.50],
        [ -2.00,  1.50,  1.25]
    ])

y = np.random.multivariate_normal(mu, r, size=num_samples)

df2 = pd.DataFrame(y)




from ml_utils import plot_utils as plu
plu.univariate_plots(df, ['four','three'], 'one')
plu.make_boxplot(df, ['one','three', 'four'], ['three','four'])


pu.impute_by_groups(df, 'one', ['three'], 'median')

fig = plt.figure()
ax1 = fig.add_subplot(211)
stats.probplot(df['one'].values, dist=stats.norm, plot=ax1)
ax1.set_xlabel('')
ax1.set_title('Probplot against normal distribution')

ax2 = fig.add_subplot(212)
xt, _ = stats.boxcox(df['one'].values)
stats.probplot(xt, dist=stats.norm, plot=ax2)
ax2.set_title('Probplot after Box-Cox transformation')

plt.show()



from ml_utils import sklearn_utils as su
from sklearn.grid_search import GridSearchCV

from sklearn.svm import LinearSVC
grid = GridSearchCV(LinearSVC(), param_grid={'C': [1, 10]}, scoring=su.ks_scorer)

from sklearn.datasets import make_classification
data = make_classification()
grid.fit(data[0], data[1])
grid.best_params_
grid.best_score_
